{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE NegativeLiterals #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeOperators #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Proto.RactorCluster.Meta where

import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Google.Protobuf.Wrappers.Polymorphic as HsProtobuf
  ( Wrapped (..)
  )
import qualified Proto.RactorCluster.Auth as Auth
import qualified Proto.RactorCluster.Control as Control
import qualified Proto.RactorCluster.Node as Node
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobufAST
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.JSONPB as HsJSONPB
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Proto3.Wire.Decode as HsProtobuf
  ( Parser
  , RawField
  )
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

newtype NetworkMessage
  = NetworkMessage {networkMessageMessage :: (Hs.Maybe NetworkMessageMessage)}
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData NetworkMessage)
instance (HsProtobuf.Named NetworkMessage) where
  nameOf _ = Hs.fromString "NetworkMessage"
instance (HsProtobuf.HasDefault NetworkMessage)
instance (HsProtobuf.Message NetworkMessage) where
  encodeMessage _ NetworkMessage{networkMessageMessage} =
    ( case networkMessageMessage of
        Hs.Nothing -> Hs.mempty
        Hs.Just x ->
          case x of
            NetworkMessageMessageAuth y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                ( ( Hs.coerce
                      @(Hs.Maybe Auth.AuthenticationMessage)
                      @(HsProtobuf.Nested Auth.AuthenticationMessage)
                  )
                    (Hs.Just y)
                )
            NetworkMessageMessageNode y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                ( ( Hs.coerce
                      @(Hs.Maybe Node.NodeMessage)
                      @(HsProtobuf.Nested Node.NodeMessage)
                  )
                    (Hs.Just y)
                )
            NetworkMessageMessageControl y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                ( ( Hs.coerce
                      @(Hs.Maybe Control.ControlMessage)
                      @(HsProtobuf.Nested Control.ControlMessage)
                  )
                    (Hs.Just y)
                )
    )
  decodeMessage _ =
    Hs.pure NetworkMessage
      <*> HsProtobuf.oneof
        Hs.Nothing
        [
          ( (HsProtobuf.FieldNumber 1)
          , Hs.pure (Hs.fmap NetworkMessageMessageAuth)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Auth.AuthenticationMessage)
                        @(Hs.Maybe Auth.AuthenticationMessage)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 2)
          , Hs.pure (Hs.fmap NetworkMessageMessageNode)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Node.NodeMessage)
                        @(Hs.Maybe Node.NodeMessage)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 3)
          , Hs.pure (Hs.fmap NetworkMessageMessageControl)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Control.ControlMessage)
                        @(Hs.Maybe Control.ControlMessage)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ]
  dotProto _ = []
instance (HsJSONPB.ToJSONPB NetworkMessage) where
  toJSONPB (NetworkMessage f1_or_f2_or_f3) =
    HsJSONPB.object
      [ ( let
            encodeMessage =
              ( case f1_or_f2_or_f3 of
                  Hs.Just (NetworkMessageMessageAuth f1) -> HsJSONPB.pair "auth" f1
                  Hs.Just (NetworkMessageMessageNode f2) -> HsJSONPB.pair "node" f2
                  Hs.Just (NetworkMessageMessageControl f3) ->
                    HsJSONPB.pair "control" f3
                  Hs.Nothing -> Hs.mempty
              )
           in
            ( \options ->
                if HsJSONPB.optEmitNamedOneof options
                  then
                    ("message" .= HsJSONPB.objectOrNull [encodeMessage] options)
                      options
                  else
                    encodeMessage options
            )
        )
      ]
  toEncodingPB (NetworkMessage f1_or_f2_or_f3) =
    HsJSONPB.pairs
      [ ( let
            encodeMessage =
              ( case f1_or_f2_or_f3 of
                  Hs.Just (NetworkMessageMessageAuth f1) -> HsJSONPB.pair "auth" f1
                  Hs.Just (NetworkMessageMessageNode f2) -> HsJSONPB.pair "node" f2
                  Hs.Just (NetworkMessageMessageControl f3) ->
                    HsJSONPB.pair "control" f3
                  Hs.Nothing -> Hs.mempty
              )
           in
            ( \options ->
                if HsJSONPB.optEmitNamedOneof options
                  then
                    ("message" .= HsJSONPB.pairsOrNull [encodeMessage] options) options
                  else
                    encodeMessage options
            )
        )
      ]
instance (HsJSONPB.FromJSONPB NetworkMessage) where
  parseJSONPB =
    HsJSONPB.withObject
      "NetworkMessage"
      ( \obj ->
          Hs.pure NetworkMessage
            <*> ( let
                    parseMessage parseObj =
                      Hs.msum
                        [ Hs.Just Hs.. NetworkMessageMessageAuth
                            <$> HsJSONPB.parseField parseObj "auth"
                        , Hs.Just Hs.. NetworkMessageMessageNode
                            <$> HsJSONPB.parseField parseObj "node"
                        , Hs.Just Hs.. NetworkMessageMessageControl
                            <$> HsJSONPB.parseField parseObj "control"
                        , Hs.pure Hs.Nothing
                        ]
                   in
                    ( obj .: "message"
                        Hs.>>= HsJSONPB.withObject "message" parseMessage
                    )
                      <|> (parseMessage obj)
                )
      )
instance (HsJSONPB.ToJSON NetworkMessage) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON NetworkMessage) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema NetworkMessage) where
  declareNamedSchema _ =
    do
      let declare_message = HsJSONPB.declareSchemaRef
      networkMessageMessage <- declare_message Proxy.Proxy
      let _ = Hs.pure NetworkMessage <*> HsJSONPB.asProxy declare_message
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "NetworkMessage"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "message"
                        , networkMessageMessage
                        )
                      ]
                }
          }
data NetworkMessageMessage
  = NetworkMessageMessageAuth Auth.AuthenticationMessage
  | NetworkMessageMessageNode Node.NodeMessage
  | NetworkMessageMessageControl Control.ControlMessage
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData NetworkMessageMessage)
instance (HsProtobuf.Named NetworkMessageMessage) where
  nameOf _ = Hs.fromString "NetworkMessageMessage"
instance (HsJSONPB.ToSchema NetworkMessageMessage) where
  declareNamedSchema _ =
    do
      let declare_auth = HsJSONPB.declareSchemaRef
      networkMessageMessageAuth <- declare_auth Proxy.Proxy
      let _ =
            Hs.pure NetworkMessageMessageAuth
              <*> HsJSONPB.asProxy declare_auth
      let declare_node = HsJSONPB.declareSchemaRef
      networkMessageMessageNode <- declare_node Proxy.Proxy
      let _ =
            Hs.pure NetworkMessageMessageNode
              <*> HsJSONPB.asProxy declare_node
      let declare_control = HsJSONPB.declareSchemaRef
      networkMessageMessageControl <- declare_control Proxy.Proxy
      let _ =
            Hs.pure NetworkMessageMessageControl
              <*> HsJSONPB.asProxy declare_control
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "NetworkMessageMessage"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "auth"
                        , networkMessageMessageAuth
                        )
                      ,
                        ( "node"
                        , networkMessageMessageNode
                        )
                      ,
                        ( "control"
                        , networkMessageMessageControl
                        )
                      ]
                , HsJSONPB._schemaMinProperties = Hs.Just 1
                , HsJSONPB._schemaMaxProperties = Hs.Just 1
                }
          }
