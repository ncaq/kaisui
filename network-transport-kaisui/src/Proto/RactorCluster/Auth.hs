{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE NegativeLiterals #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeOperators #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Proto.RactorCluster.Auth where

import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Google.Protobuf.Wrappers.Polymorphic as HsProtobuf
  ( Wrapped (..)
  )
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobufAST
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.JSONPB as HsJSONPB
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Proto3.Wire.Decode as HsProtobuf
  ( Parser
  , RawField
  )
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

newtype NodeFlags
  = NodeFlags {nodeFlagsVersion :: Hs.Word32}
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData NodeFlags)
instance (HsProtobuf.Named NodeFlags) where
  nameOf _ = Hs.fromString "NodeFlags"
instance (HsProtobuf.HasDefault NodeFlags)
instance (HsProtobuf.Message NodeFlags) where
  encodeMessage _ NodeFlags{nodeFlagsVersion} =
    ( HsProtobuf.encodeMessageField
        (HsProtobuf.FieldNumber 1)
        nodeFlagsVersion
    )
  decodeMessage _ =
    Hs.pure NodeFlags
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 1)
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.UInt32)
        (HsProtobufAST.Single "version")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB NodeFlags) where
  toJSONPB (NodeFlags f1) = HsJSONPB.object ["version" .= f1]
  toEncodingPB (NodeFlags f1) = HsJSONPB.pairs ["version" .= f1]
instance (HsJSONPB.FromJSONPB NodeFlags) where
  parseJSONPB =
    HsJSONPB.withObject
      "NodeFlags"
      (\obj -> Hs.pure NodeFlags <*> obj .: "version")
instance (HsJSONPB.ToJSON NodeFlags) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON NodeFlags) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema NodeFlags) where
  declareNamedSchema _ =
    do
      let declare_version = HsJSONPB.declareSchemaRef
      nodeFlagsVersion <- declare_version Proxy.Proxy
      let _ = Hs.pure NodeFlags <*> HsJSONPB.asProxy declare_version
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "NodeFlags"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "version"
                        , nodeFlagsVersion
                        )
                      ]
                }
          }
data NameMessage
  = NameMessage
  { nameMessageName :: Hs.Text
  , nameMessageFlags :: (Hs.Maybe NodeFlags)
  , nameMessageConnectionString :: Hs.Text
  }
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData NameMessage)
instance (HsProtobuf.Named NameMessage) where
  nameOf _ = Hs.fromString "NameMessage"
instance (HsProtobuf.HasDefault NameMessage)
instance (HsProtobuf.Message NameMessage) where
  encodeMessage
    _
    NameMessage
      { nameMessageName
      , nameMessageFlags
      , nameMessageConnectionString
      } =
      Hs.mappend
        ( Hs.mappend
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                ( (Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text))
                    nameMessageName
                )
            )
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                ( ( Hs.coerce
                      @(Hs.Maybe NodeFlags)
                      @(HsProtobuf.Nested NodeFlags)
                  )
                    nameMessageFlags
                )
            )
        )
        ( HsProtobuf.encodeMessageField
            (HsProtobuf.FieldNumber 3)
            ( (Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text))
                nameMessageConnectionString
            )
        )
  decodeMessage _ =
    Hs.pure NameMessage
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Nested NodeFlags)
                @(Hs.Maybe NodeFlags)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 3)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "name")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 2)
        ( HsProtobufAST.Prim
            (HsProtobufAST.Named (HsProtobufAST.Single "NodeFlags"))
        )
        (HsProtobufAST.Single "flags")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 3)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "connection_string")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB NameMessage) where
  toJSONPB (NameMessage f1 f2 f3) =
    HsJSONPB.object
      [ "name" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f1)
      , "flags"
          .= ( ( Hs.coerce
                   @(Hs.Maybe NodeFlags)
                   @(HsProtobuf.Nested NodeFlags)
               )
                 f2
             )
      , "connection_string"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f3)
      ]
  toEncodingPB (NameMessage f1 f2 f3) =
    HsJSONPB.pairs
      [ "name" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f1)
      , "flags"
          .= ( ( Hs.coerce
                   @(Hs.Maybe NodeFlags)
                   @(HsProtobuf.Nested NodeFlags)
               )
                 f2
             )
      , "connection_string"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f3)
      ]
instance (HsJSONPB.FromJSONPB NameMessage) where
  parseJSONPB =
    HsJSONPB.withObject
      "NameMessage"
      ( \obj ->
          Hs.pure NameMessage
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "name")
                )
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Nested NodeFlags)
                      @(Hs.Maybe NodeFlags)
                  )
                    (obj .: "flags")
                )
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "connection_string")
                )
      )
instance (HsJSONPB.ToJSON NameMessage) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON NameMessage) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema NameMessage) where
  declareNamedSchema _ =
    do
      let declare_name = HsJSONPB.declareSchemaRef
      nameMessageName <- declare_name Proxy.Proxy
      let declare_flags = HsJSONPB.declareSchemaRef
      nameMessageFlags <- declare_flags Proxy.Proxy
      let declare_connection_string = HsJSONPB.declareSchemaRef
      nameMessageConnectionString <-
        declare_connection_string
          Proxy.Proxy
      let _ =
            Hs.pure NameMessage
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_name)
                  )
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested NodeFlags)
                        @(Hs.Maybe NodeFlags)
                    )
                      (HsJSONPB.asProxy declare_flags)
                  )
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_connection_string)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "NameMessage"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "name"
                        , nameMessageName
                        )
                      ,
                        ( "flags"
                        , nameMessageFlags
                        )
                      ,
                        ( "connection_string"
                        , nameMessageConnectionString
                        )
                      ]
                }
          }
newtype ServerStatus
  = ServerStatus {serverStatusStatus :: (HsProtobuf.Enumerated ServerStatus_Status)}
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData ServerStatus)
instance (HsProtobuf.Named ServerStatus) where
  nameOf _ = Hs.fromString "ServerStatus"
instance (HsProtobuf.HasDefault ServerStatus)
instance (HsProtobuf.Message ServerStatus) where
  encodeMessage _ ServerStatus{serverStatusStatus} =
    ( HsProtobuf.encodeMessageField
        (HsProtobuf.FieldNumber 1)
        serverStatusStatus
    )
  decodeMessage _ =
    Hs.pure ServerStatus
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 1)
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        ( HsProtobufAST.Prim
            (HsProtobufAST.Named (HsProtobufAST.Single "Status"))
        )
        (HsProtobufAST.Single "status")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB ServerStatus) where
  toJSONPB (ServerStatus f1) = HsJSONPB.object ["status" .= f1]
  toEncodingPB (ServerStatus f1) = HsJSONPB.pairs ["status" .= f1]
instance (HsJSONPB.FromJSONPB ServerStatus) where
  parseJSONPB =
    HsJSONPB.withObject
      "ServerStatus"
      (\obj -> Hs.pure ServerStatus <*> obj .: "status")
instance (HsJSONPB.ToJSON ServerStatus) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ServerStatus) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ServerStatus) where
  declareNamedSchema _ =
    do
      let declare_status = HsJSONPB.declareSchemaRef
      serverStatusStatus <- declare_status Proxy.Proxy
      let _ = Hs.pure ServerStatus <*> HsJSONPB.asProxy declare_status
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "ServerStatus"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "status"
                        , serverStatusStatus
                        )
                      ]
                }
          }
data ServerStatus_Status
  = ServerStatus_StatusOK
  | ServerStatus_StatusOK_SIMULTANEOUS
  | ServerStatus_StatusNOT_OK
  | ServerStatus_StatusNOT_ALLOWED
  | ServerStatus_StatusALIVE
  deriving (Hs.Eq, Hs.Generic, Hs.NFData, Hs.Show)
instance (HsProtobuf.Named ServerStatus_Status) where
  nameOf _ = Hs.fromString "ServerStatus_Status"
instance (HsProtobuf.HasDefault ServerStatus_Status)
instance (Hs.Bounded ServerStatus_Status) where
  minBound = ServerStatus_StatusOK
  maxBound = ServerStatus_StatusALIVE
instance (Hs.Ord ServerStatus_Status) where
  compare x y =
    Hs.compare
      (HsProtobuf.fromProtoEnum x)
      (HsProtobuf.fromProtoEnum y)
instance (HsProtobuf.ProtoEnum ServerStatus_Status) where
  toProtoEnumMay 0 = Hs.Just ServerStatus_StatusOK
  toProtoEnumMay 1 = Hs.Just ServerStatus_StatusOK_SIMULTANEOUS
  toProtoEnumMay 2 = Hs.Just ServerStatus_StatusNOT_OK
  toProtoEnumMay 3 = Hs.Just ServerStatus_StatusNOT_ALLOWED
  toProtoEnumMay 4 = Hs.Just ServerStatus_StatusALIVE
  toProtoEnumMay _ = Hs.Nothing
  fromProtoEnum ServerStatus_StatusOK = 0
  fromProtoEnum ServerStatus_StatusOK_SIMULTANEOUS = 1
  fromProtoEnum ServerStatus_StatusNOT_OK = 2
  fromProtoEnum ServerStatus_StatusNOT_ALLOWED = 3
  fromProtoEnum ServerStatus_StatusALIVE = 4
instance (HsJSONPB.ToJSONPB ServerStatus_Status) where
  toJSONPB x _ = HsJSONPB.enumFieldString x
  toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
instance (HsJSONPB.FromJSONPB ServerStatus_Status) where
  parseJSONPB (HsJSONPB.String "OK") = Hs.pure ServerStatus_StatusOK
  parseJSONPB (HsJSONPB.String "OK_SIMULTANEOUS") =
    Hs.pure ServerStatus_StatusOK_SIMULTANEOUS
  parseJSONPB (HsJSONPB.String "NOT_OK") =
    Hs.pure ServerStatus_StatusNOT_OK
  parseJSONPB (HsJSONPB.String "NOT_ALLOWED") =
    Hs.pure ServerStatus_StatusNOT_ALLOWED
  parseJSONPB (HsJSONPB.String "ALIVE") =
    Hs.pure ServerStatus_StatusALIVE
  parseJSONPB v = HsJSONPB.typeMismatch "ServerStatus_Status" v
instance (HsJSONPB.ToJSON ServerStatus_Status) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ServerStatus_Status) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsProtobuf.Finite ServerStatus_Status)
newtype ClientStatus
  = ClientStatus {clientStatusStatus :: Hs.Bool}
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData ClientStatus)
instance (HsProtobuf.Named ClientStatus) where
  nameOf _ = Hs.fromString "ClientStatus"
instance (HsProtobuf.HasDefault ClientStatus)
instance (HsProtobuf.Message ClientStatus) where
  encodeMessage _ ClientStatus{clientStatusStatus} =
    ( HsProtobuf.encodeMessageField
        (HsProtobuf.FieldNumber 1)
        clientStatusStatus
    )
  decodeMessage _ =
    Hs.pure ClientStatus
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 1)
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.Bool)
        (HsProtobufAST.Single "status")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB ClientStatus) where
  toJSONPB (ClientStatus f1) = HsJSONPB.object ["status" .= f1]
  toEncodingPB (ClientStatus f1) = HsJSONPB.pairs ["status" .= f1]
instance (HsJSONPB.FromJSONPB ClientStatus) where
  parseJSONPB =
    HsJSONPB.withObject
      "ClientStatus"
      (\obj -> Hs.pure ClientStatus <*> obj .: "status")
instance (HsJSONPB.ToJSON ClientStatus) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ClientStatus) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ClientStatus) where
  declareNamedSchema _ =
    do
      let declare_status = HsJSONPB.declareSchemaRef
      clientStatusStatus <- declare_status Proxy.Proxy
      let _ = Hs.pure ClientStatus <*> HsJSONPB.asProxy declare_status
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "ClientStatus"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "status"
                        , clientStatusStatus
                        )
                      ]
                }
          }
data Challenge
  = Challenge
  { challengeName :: Hs.Text
  , challengeFlags :: (Hs.Maybe NodeFlags)
  , challengeChallenge :: Hs.Word32
  , challengeConnectionString :: Hs.Text
  }
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData Challenge)
instance (HsProtobuf.Named Challenge) where
  nameOf _ = Hs.fromString "Challenge"
instance (HsProtobuf.HasDefault Challenge)
instance (HsProtobuf.Message Challenge) where
  encodeMessage
    _
    Challenge
      { challengeName
      , challengeFlags
      , challengeChallenge
      , challengeConnectionString
      } =
      Hs.mappend
        ( Hs.mappend
            ( Hs.mappend
                ( HsProtobuf.encodeMessageField
                    (HsProtobuf.FieldNumber 1)
                    ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) challengeName)
                )
                ( HsProtobuf.encodeMessageField
                    (HsProtobuf.FieldNumber 2)
                    ( ( Hs.coerce
                          @(Hs.Maybe NodeFlags)
                          @(HsProtobuf.Nested NodeFlags)
                      )
                        challengeFlags
                    )
                )
            )
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                challengeChallenge
            )
        )
        ( HsProtobuf.encodeMessageField
            (HsProtobuf.FieldNumber 4)
            ( (Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text))
                challengeConnectionString
            )
        )
  decodeMessage _ =
    Hs.pure Challenge
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Nested NodeFlags)
                @(Hs.Maybe NodeFlags)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 3)
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 4)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "name")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 2)
        ( HsProtobufAST.Prim
            (HsProtobufAST.Named (HsProtobufAST.Single "NodeFlags"))
        )
        (HsProtobufAST.Single "flags")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 3)
        (HsProtobufAST.Prim HsProtobufAST.UInt32)
        (HsProtobufAST.Single "challenge")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 4)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "connection_string")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB Challenge) where
  toJSONPB (Challenge f1 f2 f3 f4) =
    HsJSONPB.object
      [ "name" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f1)
      , "flags"
          .= ( ( Hs.coerce
                   @(Hs.Maybe NodeFlags)
                   @(HsProtobuf.Nested NodeFlags)
               )
                 f2
             )
      , "challenge" .= f3
      , "connection_string"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f4)
      ]
  toEncodingPB (Challenge f1 f2 f3 f4) =
    HsJSONPB.pairs
      [ "name" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f1)
      , "flags"
          .= ( ( Hs.coerce
                   @(Hs.Maybe NodeFlags)
                   @(HsProtobuf.Nested NodeFlags)
               )
                 f2
             )
      , "challenge" .= f3
      , "connection_string"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f4)
      ]
instance (HsJSONPB.FromJSONPB Challenge) where
  parseJSONPB =
    HsJSONPB.withObject
      "Challenge"
      ( \obj ->
          Hs.pure Challenge
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "name")
                )
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Nested NodeFlags)
                      @(Hs.Maybe NodeFlags)
                  )
                    (obj .: "flags")
                )
            <*> obj .: "challenge"
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "connection_string")
                )
      )
instance (HsJSONPB.ToJSON Challenge) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON Challenge) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema Challenge) where
  declareNamedSchema _ =
    do
      let declare_name = HsJSONPB.declareSchemaRef
      challengeName <- declare_name Proxy.Proxy
      let declare_flags = HsJSONPB.declareSchemaRef
      challengeFlags <- declare_flags Proxy.Proxy
      let declare_challenge = HsJSONPB.declareSchemaRef
      challengeChallenge <- declare_challenge Proxy.Proxy
      let declare_connection_string = HsJSONPB.declareSchemaRef
      challengeConnectionString <- declare_connection_string Proxy.Proxy
      let _ =
            Hs.pure Challenge
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_name)
                  )
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested NodeFlags)
                        @(Hs.Maybe NodeFlags)
                    )
                      (HsJSONPB.asProxy declare_flags)
                  )
              <*> HsJSONPB.asProxy declare_challenge
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_connection_string)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "Challenge"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "name"
                        , challengeName
                        )
                      ,
                        ( "flags"
                        , challengeFlags
                        )
                      ,
                        ( "challenge"
                        , challengeChallenge
                        )
                      ,
                        ( "connection_string"
                        , challengeConnectionString
                        )
                      ]
                }
          }
data ChallengeReply
  = ChallengeReply
  { challengeReplyChallenge :: Hs.Word32
  , challengeReplyDigest :: Hs.ByteString
  }
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData ChallengeReply)
instance (HsProtobuf.Named ChallengeReply) where
  nameOf _ = Hs.fromString "ChallengeReply"
instance (HsProtobuf.HasDefault ChallengeReply)
instance (HsProtobuf.Message ChallengeReply) where
  encodeMessage
    _
    ChallengeReply{challengeReplyChallenge, challengeReplyDigest} =
      Hs.mappend
        ( HsProtobuf.encodeMessageField
            (HsProtobuf.FieldNumber 1)
            challengeReplyChallenge
        )
        ( HsProtobuf.encodeMessageField
            (HsProtobuf.FieldNumber 2)
            ( (Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString))
                challengeReplyDigest
            )
        )
  decodeMessage _ =
    Hs.pure ChallengeReply
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 1)
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Bytes Hs.ByteString)
                @Hs.ByteString
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.UInt32)
        (HsProtobufAST.Single "challenge")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 2)
        (HsProtobufAST.Prim HsProtobufAST.Bytes)
        (HsProtobufAST.Single "digest")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB ChallengeReply) where
  toJSONPB (ChallengeReply f1 f2) =
    HsJSONPB.object
      [ "challenge" .= f1
      , "digest"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f2)
      ]
  toEncodingPB (ChallengeReply f1 f2) =
    HsJSONPB.pairs
      [ "challenge" .= f1
      , "digest"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f2)
      ]
instance (HsJSONPB.FromJSONPB ChallengeReply) where
  parseJSONPB =
    HsJSONPB.withObject
      "ChallengeReply"
      ( \obj ->
          Hs.pure ChallengeReply
            <*> obj .: "challenge"
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Bytes Hs.ByteString)
                      @Hs.ByteString
                  )
                    (obj .: "digest")
                )
      )
instance (HsJSONPB.ToJSON ChallengeReply) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ChallengeReply) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ChallengeReply) where
  declareNamedSchema _ =
    do
      let declare_challenge = HsJSONPB.declareSchemaRef
      challengeReplyChallenge <- declare_challenge Proxy.Proxy
      let declare_digest = HsJSONPB.declareSchemaRef
      challengeReplyDigest <- declare_digest Proxy.Proxy
      let _ =
            Hs.pure ChallengeReply
              <*> HsJSONPB.asProxy declare_challenge
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Bytes Hs.ByteString)
                        @Hs.ByteString
                    )
                      (HsJSONPB.asProxy declare_digest)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "ChallengeReply"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "challenge"
                        , challengeReplyChallenge
                        )
                      ,
                        ( "digest"
                        , challengeReplyDigest
                        )
                      ]
                }
          }
newtype ChallengeAck
  = ChallengeAck {challengeAckDigest :: Hs.ByteString}
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData ChallengeAck)
instance (HsProtobuf.Named ChallengeAck) where
  nameOf _ = Hs.fromString "ChallengeAck"
instance (HsProtobuf.HasDefault ChallengeAck)
instance (HsProtobuf.Message ChallengeAck) where
  encodeMessage _ ChallengeAck{challengeAckDigest} =
    ( HsProtobuf.encodeMessageField
        (HsProtobuf.FieldNumber 1)
        ( (Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString))
            challengeAckDigest
        )
    )
  decodeMessage _ =
    Hs.pure ChallengeAck
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Bytes Hs.ByteString)
                @Hs.ByteString
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.Bytes)
        (HsProtobufAST.Single "digest")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB ChallengeAck) where
  toJSONPB (ChallengeAck f1) =
    HsJSONPB.object
      [ "digest"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f1)
      ]
  toEncodingPB (ChallengeAck f1) =
    HsJSONPB.pairs
      [ "digest"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f1)
      ]
instance (HsJSONPB.FromJSONPB ChallengeAck) where
  parseJSONPB =
    HsJSONPB.withObject
      "ChallengeAck"
      ( \obj ->
          Hs.pure ChallengeAck
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Bytes Hs.ByteString)
                      @Hs.ByteString
                  )
                    (obj .: "digest")
                )
      )
instance (HsJSONPB.ToJSON ChallengeAck) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ChallengeAck) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ChallengeAck) where
  declareNamedSchema _ =
    do
      let declare_digest = HsJSONPB.declareSchemaRef
      challengeAckDigest <- declare_digest Proxy.Proxy
      let _ =
            Hs.pure ChallengeAck
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Bytes Hs.ByteString)
                        @Hs.ByteString
                    )
                      (HsJSONPB.asProxy declare_digest)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "ChallengeAck"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "digest"
                        , challengeAckDigest
                        )
                      ]
                }
          }
newtype AuthenticationMessage
  = AuthenticationMessage {authenticationMessageMsg :: (Hs.Maybe AuthenticationMessageMsg)}
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData AuthenticationMessage)
instance (HsProtobuf.Named AuthenticationMessage) where
  nameOf _ = Hs.fromString "AuthenticationMessage"
instance (HsProtobuf.HasDefault AuthenticationMessage)
instance (HsProtobuf.Message AuthenticationMessage) where
  encodeMessage _ AuthenticationMessage{authenticationMessageMsg} =
    ( case authenticationMessageMsg of
        Hs.Nothing -> Hs.mempty
        Hs.Just x ->
          case x of
            AuthenticationMessageMsgName y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                ( ( Hs.coerce
                      @(Hs.Maybe NameMessage)
                      @(HsProtobuf.Nested NameMessage)
                  )
                    (Hs.Just y)
                )
            AuthenticationMessageMsgServerStatus y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                ( ( Hs.coerce
                      @(Hs.Maybe ServerStatus)
                      @(HsProtobuf.Nested ServerStatus)
                  )
                    (Hs.Just y)
                )
            AuthenticationMessageMsgClientStatus y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                ( ( Hs.coerce
                      @(Hs.Maybe ClientStatus)
                      @(HsProtobuf.Nested ClientStatus)
                  )
                    (Hs.Just y)
                )
            AuthenticationMessageMsgServerChallenge y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 4)
                ( ( Hs.coerce
                      @(Hs.Maybe Challenge)
                      @(HsProtobuf.Nested Challenge)
                  )
                    (Hs.Just y)
                )
            AuthenticationMessageMsgClientChallenge y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 5)
                ( ( Hs.coerce
                      @(Hs.Maybe ChallengeReply)
                      @(HsProtobuf.Nested ChallengeReply)
                  )
                    (Hs.Just y)
                )
            AuthenticationMessageMsgServerAck y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 6)
                ( ( Hs.coerce
                      @(Hs.Maybe ChallengeAck)
                      @(HsProtobuf.Nested ChallengeAck)
                  )
                    (Hs.Just y)
                )
    )
  decodeMessage _ =
    Hs.pure AuthenticationMessage
      <*> HsProtobuf.oneof
        Hs.Nothing
        [
          ( (HsProtobuf.FieldNumber 1)
          , Hs.pure (Hs.fmap AuthenticationMessageMsgName)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested NameMessage)
                        @(Hs.Maybe NameMessage)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 2)
          , Hs.pure (Hs.fmap AuthenticationMessageMsgServerStatus)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested ServerStatus)
                        @(Hs.Maybe ServerStatus)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 3)
          , Hs.pure (Hs.fmap AuthenticationMessageMsgClientStatus)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested ClientStatus)
                        @(Hs.Maybe ClientStatus)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 4)
          , Hs.pure (Hs.fmap AuthenticationMessageMsgServerChallenge)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Challenge)
                        @(Hs.Maybe Challenge)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 5)
          , Hs.pure (Hs.fmap AuthenticationMessageMsgClientChallenge)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested ChallengeReply)
                        @(Hs.Maybe ChallengeReply)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 6)
          , Hs.pure (Hs.fmap AuthenticationMessageMsgServerAck)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested ChallengeAck)
                        @(Hs.Maybe ChallengeAck)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ]
  dotProto _ = []
instance (HsJSONPB.ToJSONPB AuthenticationMessage) where
  toJSONPB (AuthenticationMessage f1_or_f2_or_f3_or_f4_or_f5_or_f6) =
    HsJSONPB.object
      [ ( let
            encodeMsg =
              ( case f1_or_f2_or_f3_or_f4_or_f5_or_f6 of
                  Hs.Just (AuthenticationMessageMsgName f1) ->
                    HsJSONPB.pair "name" f1
                  Hs.Just (AuthenticationMessageMsgServerStatus f2) ->
                    HsJSONPB.pair "server_status" f2
                  Hs.Just (AuthenticationMessageMsgClientStatus f3) ->
                    HsJSONPB.pair "client_status" f3
                  Hs.Just (AuthenticationMessageMsgServerChallenge f4) ->
                    HsJSONPB.pair "server_challenge" f4
                  Hs.Just (AuthenticationMessageMsgClientChallenge f5) ->
                    HsJSONPB.pair "client_challenge" f5
                  Hs.Just (AuthenticationMessageMsgServerAck f6) ->
                    HsJSONPB.pair "server_ack" f6
                  Hs.Nothing -> Hs.mempty
              )
           in
            ( \options ->
                if HsJSONPB.optEmitNamedOneof options
                  then
                    ("msg" .= HsJSONPB.objectOrNull [encodeMsg] options) options
                  else
                    encodeMsg options
            )
        )
      ]
  toEncodingPB
    (AuthenticationMessage f1_or_f2_or_f3_or_f4_or_f5_or_f6) =
      HsJSONPB.pairs
        [ ( let
              encodeMsg =
                ( case f1_or_f2_or_f3_or_f4_or_f5_or_f6 of
                    Hs.Just (AuthenticationMessageMsgName f1) ->
                      HsJSONPB.pair "name" f1
                    Hs.Just (AuthenticationMessageMsgServerStatus f2) ->
                      HsJSONPB.pair "server_status" f2
                    Hs.Just (AuthenticationMessageMsgClientStatus f3) ->
                      HsJSONPB.pair "client_status" f3
                    Hs.Just (AuthenticationMessageMsgServerChallenge f4) ->
                      HsJSONPB.pair "server_challenge" f4
                    Hs.Just (AuthenticationMessageMsgClientChallenge f5) ->
                      HsJSONPB.pair "client_challenge" f5
                    Hs.Just (AuthenticationMessageMsgServerAck f6) ->
                      HsJSONPB.pair "server_ack" f6
                    Hs.Nothing -> Hs.mempty
                )
             in
              ( \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then
                      ("msg" .= HsJSONPB.pairsOrNull [encodeMsg] options) options
                    else
                      encodeMsg options
              )
          )
        ]
instance (HsJSONPB.FromJSONPB AuthenticationMessage) where
  parseJSONPB =
    HsJSONPB.withObject
      "AuthenticationMessage"
      ( \obj ->
          Hs.pure AuthenticationMessage
            <*> ( let
                    parseMsg parseObj =
                      Hs.msum
                        [ Hs.Just Hs.. AuthenticationMessageMsgName
                            <$> HsJSONPB.parseField parseObj "name"
                        , Hs.Just Hs.. AuthenticationMessageMsgServerStatus
                            <$> HsJSONPB.parseField parseObj "server_status"
                        , Hs.Just Hs.. AuthenticationMessageMsgClientStatus
                            <$> HsJSONPB.parseField parseObj "client_status"
                        , Hs.Just Hs.. AuthenticationMessageMsgServerChallenge
                            <$> HsJSONPB.parseField parseObj "server_challenge"
                        , Hs.Just Hs.. AuthenticationMessageMsgClientChallenge
                            <$> HsJSONPB.parseField parseObj "client_challenge"
                        , Hs.Just Hs.. AuthenticationMessageMsgServerAck
                            <$> HsJSONPB.parseField parseObj "server_ack"
                        , Hs.pure Hs.Nothing
                        ]
                   in
                    (obj .: "msg" Hs.>>= HsJSONPB.withObject "msg" parseMsg)
                      <|> (parseMsg obj)
                )
      )
instance (HsJSONPB.ToJSON AuthenticationMessage) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON AuthenticationMessage) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema AuthenticationMessage) where
  declareNamedSchema _ =
    do
      let declare_msg = HsJSONPB.declareSchemaRef
      authenticationMessageMsg <- declare_msg Proxy.Proxy
      let _ =
            Hs.pure AuthenticationMessage
              <*> HsJSONPB.asProxy declare_msg
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "AuthenticationMessage"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "msg"
                        , authenticationMessageMsg
                        )
                      ]
                }
          }
data AuthenticationMessageMsg
  = AuthenticationMessageMsgName NameMessage
  | AuthenticationMessageMsgServerStatus ServerStatus
  | AuthenticationMessageMsgClientStatus ClientStatus
  | AuthenticationMessageMsgServerChallenge Challenge
  | AuthenticationMessageMsgClientChallenge ChallengeReply
  | AuthenticationMessageMsgServerAck ChallengeAck
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData AuthenticationMessageMsg)
instance (HsProtobuf.Named AuthenticationMessageMsg) where
  nameOf _ = Hs.fromString "AuthenticationMessageMsg"
instance (HsJSONPB.ToSchema AuthenticationMessageMsg) where
  declareNamedSchema _ =
    do
      let declare_name = HsJSONPB.declareSchemaRef
      authenticationMessageMsgName <- declare_name Proxy.Proxy
      let _ =
            Hs.pure AuthenticationMessageMsgName
              <*> HsJSONPB.asProxy declare_name
      let declare_server_status = HsJSONPB.declareSchemaRef
      authenticationMessageMsgServerStatus <-
        declare_server_status
          Proxy.Proxy
      let _ =
            Hs.pure AuthenticationMessageMsgServerStatus
              <*> HsJSONPB.asProxy declare_server_status
      let declare_client_status = HsJSONPB.declareSchemaRef
      authenticationMessageMsgClientStatus <-
        declare_client_status
          Proxy.Proxy
      let _ =
            Hs.pure AuthenticationMessageMsgClientStatus
              <*> HsJSONPB.asProxy declare_client_status
      let declare_server_challenge = HsJSONPB.declareSchemaRef
      authenticationMessageMsgServerChallenge <-
        declare_server_challenge
          Proxy.Proxy
      let _ =
            Hs.pure AuthenticationMessageMsgServerChallenge
              <*> HsJSONPB.asProxy declare_server_challenge
      let declare_client_challenge = HsJSONPB.declareSchemaRef
      authenticationMessageMsgClientChallenge <-
        declare_client_challenge
          Proxy.Proxy
      let _ =
            Hs.pure AuthenticationMessageMsgClientChallenge
              <*> HsJSONPB.asProxy declare_client_challenge
      let declare_server_ack = HsJSONPB.declareSchemaRef
      authenticationMessageMsgServerAck <- declare_server_ack Proxy.Proxy
      let _ =
            Hs.pure AuthenticationMessageMsgServerAck
              <*> HsJSONPB.asProxy declare_server_ack
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "AuthenticationMessageMsg"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "name"
                        , authenticationMessageMsgName
                        )
                      ,
                        ( "server_status"
                        , authenticationMessageMsgServerStatus
                        )
                      ,
                        ( "client_status"
                        , authenticationMessageMsgClientStatus
                        )
                      ,
                        ( "server_challenge"
                        , authenticationMessageMsgServerChallenge
                        )
                      ,
                        ( "client_challenge"
                        , authenticationMessageMsgClientChallenge
                        )
                      ,
                        ( "server_ack"
                        , authenticationMessageMsgServerAck
                        )
                      ]
                , HsJSONPB._schemaMinProperties = Hs.Just 1
                , HsJSONPB._schemaMaxProperties = Hs.Just 1
                }
          }
