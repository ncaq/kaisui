{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE NegativeLiterals #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeOperators #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Proto.RactorCluster.Control where

import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Google.Protobuf.Timestamp
import qualified Google.Protobuf.Wrappers.Polymorphic as HsProtobuf
  ( Wrapped (..)
  )
import qualified Proto.RactorCluster.Auth as Auth
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobufAST
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.JSONPB as HsJSONPB
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Proto3.Wire.Decode as HsProtobuf
  ( Parser
  , RawField
  )
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

data Actor
  = Actor {actorPid :: Hs.Word64, actorName :: Hs.Text}
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData Actor)
instance (HsProtobuf.Named Actor) where
  nameOf _ = Hs.fromString "Actor"
instance (HsProtobuf.HasDefault Actor)
instance (HsProtobuf.Message Actor) where
  encodeMessage _ Actor{actorPid, actorName} =
    Hs.mappend
      (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1) actorPid)
      ( HsProtobuf.encodeMessageField
          (HsProtobuf.FieldNumber 2)
          ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) actorName)
      )
  decodeMessage _ =
    Hs.pure Actor
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 1)
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.UInt64)
        (HsProtobufAST.Single "pid")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 2)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "name")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB Actor) where
  toJSONPB (Actor f1 f2) =
    HsJSONPB.object
      [ "pid" .= f1
      , "name" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f2)
      ]
  toEncodingPB (Actor f1 f2) =
    HsJSONPB.pairs
      [ "pid" .= f1
      , "name" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f2)
      ]
instance (HsJSONPB.FromJSONPB Actor) where
  parseJSONPB =
    HsJSONPB.withObject
      "Actor"
      ( \obj ->
          Hs.pure Actor
            <*> obj .: "pid"
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "name")
                )
      )
instance (HsJSONPB.ToJSON Actor) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON Actor) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema Actor) where
  declareNamedSchema _ =
    do
      let declare_pid = HsJSONPB.declareSchemaRef
      actorPid <- declare_pid Proxy.Proxy
      let declare_name = HsJSONPB.declareSchemaRef
      actorName <- declare_name Proxy.Proxy
      let _ =
            Hs.pure Actor
              <*> HsJSONPB.asProxy declare_pid
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_name)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "Actor"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [ ("pid", actorPid)
                      ,
                        ( "name"
                        , actorName
                        )
                      ]
                }
          }
newtype Ping
  = Ping {pingTimestamp :: (Hs.Maybe Google.Protobuf.Timestamp.Timestamp)}
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData Ping)
instance (HsProtobuf.Named Ping) where
  nameOf _ = Hs.fromString "Ping"
instance (HsProtobuf.HasDefault Ping)
instance (HsProtobuf.Message Ping) where
  encodeMessage _ Ping{pingTimestamp} =
    ( HsProtobuf.encodeMessageField
        (HsProtobuf.FieldNumber 1)
        ( ( Hs.coerce
              @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
              @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
          )
            pingTimestamp
        )
    )
  decodeMessage _ =
    Hs.pure Ping
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        ( HsProtobufAST.Prim
            ( HsProtobufAST.Named
                ( HsProtobufAST.Dots
                    (HsProtobufAST.Path ("google" Hs.:| ["protobuf", "Timestamp"]))
                )
            )
        )
        (HsProtobufAST.Single "timestamp")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB Ping) where
  toJSONPB (Ping f1) =
    HsJSONPB.object
      [ "timestamp"
          .= ( ( Hs.coerce
                   @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                   @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
               )
                 f1
             )
      ]
  toEncodingPB (Ping f1) =
    HsJSONPB.pairs
      [ "timestamp"
          .= ( ( Hs.coerce
                   @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                   @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
               )
                 f1
             )
      ]
instance (HsJSONPB.FromJSONPB Ping) where
  parseJSONPB =
    HsJSONPB.withObject
      "Ping"
      ( \obj ->
          Hs.pure Ping
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                      @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                  )
                    (obj .: "timestamp")
                )
      )
instance (HsJSONPB.ToJSON Ping) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON Ping) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema Ping) where
  declareNamedSchema _ =
    do
      let declare_timestamp = HsJSONPB.declareSchemaRef
      pingTimestamp <- declare_timestamp Proxy.Proxy
      let _ =
            Hs.pure Ping
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                        @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                    )
                      (HsJSONPB.asProxy declare_timestamp)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "Ping"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "timestamp"
                        , pingTimestamp
                        )
                      ]
                }
          }
newtype Pong
  = Pong {pongTimestamp :: (Hs.Maybe Google.Protobuf.Timestamp.Timestamp)}
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData Pong)
instance (HsProtobuf.Named Pong) where
  nameOf _ = Hs.fromString "Pong"
instance (HsProtobuf.HasDefault Pong)
instance (HsProtobuf.Message Pong) where
  encodeMessage _ Pong{pongTimestamp} =
    ( HsProtobuf.encodeMessageField
        (HsProtobuf.FieldNumber 1)
        ( ( Hs.coerce
              @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
              @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
          )
            pongTimestamp
        )
    )
  decodeMessage _ =
    Hs.pure Pong
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        ( HsProtobufAST.Prim
            ( HsProtobufAST.Named
                ( HsProtobufAST.Dots
                    (HsProtobufAST.Path ("google" Hs.:| ["protobuf", "Timestamp"]))
                )
            )
        )
        (HsProtobufAST.Single "timestamp")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB Pong) where
  toJSONPB (Pong f1) =
    HsJSONPB.object
      [ "timestamp"
          .= ( ( Hs.coerce
                   @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                   @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
               )
                 f1
             )
      ]
  toEncodingPB (Pong f1) =
    HsJSONPB.pairs
      [ "timestamp"
          .= ( ( Hs.coerce
                   @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                   @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
               )
                 f1
             )
      ]
instance (HsJSONPB.FromJSONPB Pong) where
  parseJSONPB =
    HsJSONPB.withObject
      "Pong"
      ( \obj ->
          Hs.pure Pong
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                      @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                  )
                    (obj .: "timestamp")
                )
      )
instance (HsJSONPB.ToJSON Pong) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON Pong) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema Pong) where
  declareNamedSchema _ =
    do
      let declare_timestamp = HsJSONPB.declareSchemaRef
      pongTimestamp <- declare_timestamp Proxy.Proxy
      let _ =
            Hs.pure Pong
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                        @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                    )
                      (HsJSONPB.asProxy declare_timestamp)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "Pong"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "timestamp"
                        , pongTimestamp
                        )
                      ]
                }
          }
newtype Spawn
  = Spawn {spawnActors :: (Hs.Vector Actor)}
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData Spawn)
instance (HsProtobuf.Named Spawn) where
  nameOf _ = Hs.fromString "Spawn"
instance (HsProtobuf.HasDefault Spawn)
instance (HsProtobuf.Message Spawn) where
  encodeMessage _ Spawn{spawnActors} =
    ( HsProtobuf.encodeMessageField
        (HsProtobuf.FieldNumber 1)
        ( ( Hs.coerce
              @(Hs.Vector Actor)
              @(HsProtobuf.NestedVec Actor)
          )
            spawnActors
        )
    )
  decodeMessage _ =
    Hs.pure Spawn
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.NestedVec Actor)
                @(Hs.Vector Actor)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        ( HsProtobufAST.Repeated
            (HsProtobufAST.Named (HsProtobufAST.Single "Actor"))
        )
        (HsProtobufAST.Single "actors")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB Spawn) where
  toJSONPB (Spawn f1) =
    HsJSONPB.object
      [ "actors"
          .= ( ( Hs.coerce
                   @(Hs.Vector Actor)
                   @(HsProtobuf.NestedVec Actor)
               )
                 f1
             )
      ]
  toEncodingPB (Spawn f1) =
    HsJSONPB.pairs
      [ "actors"
          .= ( ( Hs.coerce
                   @(Hs.Vector Actor)
                   @(HsProtobuf.NestedVec Actor)
               )
                 f1
             )
      ]
instance (HsJSONPB.FromJSONPB Spawn) where
  parseJSONPB =
    HsJSONPB.withObject
      "Spawn"
      ( \obj ->
          Hs.pure Spawn
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.NestedVec Actor)
                      @(Hs.Vector Actor)
                  )
                    (obj .: "actors")
                )
      )
instance (HsJSONPB.ToJSON Spawn) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON Spawn) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema Spawn) where
  declareNamedSchema _ =
    do
      let declare_actors = HsJSONPB.declareSchemaRef
      spawnActors <- declare_actors Proxy.Proxy
      let _ =
            Hs.pure Spawn
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.NestedVec Actor)
                        @(Hs.Vector Actor)
                    )
                      (HsJSONPB.asProxy declare_actors)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "Spawn"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "actors"
                        , spawnActors
                        )
                      ]
                }
          }
newtype Terminate
  = Terminate {terminateIds :: (Hs.Vector Hs.Word64)}
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData Terminate)
instance (HsProtobuf.Named Terminate) where
  nameOf _ = Hs.fromString "Terminate"
instance (HsProtobuf.HasDefault Terminate)
instance (HsProtobuf.Message Terminate) where
  encodeMessage _ Terminate{terminateIds} =
    ( HsProtobuf.encodeMessageField
        (HsProtobuf.FieldNumber 1)
        ( ( Hs.coerce
              @(Hs.Vector Hs.Word64)
              @(HsProtobuf.PackedVec Hs.Word64)
          )
            terminateIds
        )
    )
  decodeMessage _ =
    Hs.pure Terminate
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.PackedVec Hs.Word64)
                @(Hs.Vector Hs.Word64)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Repeated HsProtobufAST.UInt64)
        (HsProtobufAST.Single "ids")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB Terminate) where
  toJSONPB (Terminate f1) =
    HsJSONPB.object
      [ "ids"
          .= ( ( Hs.coerce
                   @(Hs.Vector Hs.Word64)
                   @(HsProtobuf.PackedVec Hs.Word64)
               )
                 f1
             )
      ]
  toEncodingPB (Terminate f1) =
    HsJSONPB.pairs
      [ "ids"
          .= ( ( Hs.coerce
                   @(Hs.Vector Hs.Word64)
                   @(HsProtobuf.PackedVec Hs.Word64)
               )
                 f1
             )
      ]
instance (HsJSONPB.FromJSONPB Terminate) where
  parseJSONPB =
    HsJSONPB.withObject
      "Terminate"
      ( \obj ->
          Hs.pure Terminate
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.PackedVec Hs.Word64)
                      @(Hs.Vector Hs.Word64)
                  )
                    (obj .: "ids")
                )
      )
instance (HsJSONPB.ToJSON Terminate) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON Terminate) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema Terminate) where
  declareNamedSchema _ =
    do
      let declare_ids = HsJSONPB.declareSchemaRef
      terminateIds <- declare_ids Proxy.Proxy
      let _ =
            Hs.pure Terminate
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.PackedVec Hs.Word64)
                        @(Hs.Vector Hs.Word64)
                    )
                      (HsJSONPB.asProxy declare_ids)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "Terminate"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "ids"
                        , terminateIds
                        )
                      ]
                }
          }
data PgJoin
  = PgJoin
  { pgJoinGroup :: Hs.Text
  , pgJoinActors :: (Hs.Vector Actor)
  , pgJoinScope :: Hs.Text
  }
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData PgJoin)
instance (HsProtobuf.Named PgJoin) where
  nameOf _ = Hs.fromString "PgJoin"
instance (HsProtobuf.HasDefault PgJoin)
instance (HsProtobuf.Message PgJoin) where
  encodeMessage _ PgJoin{pgJoinGroup, pgJoinActors, pgJoinScope} =
    Hs.mappend
      ( Hs.mappend
          ( HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 1)
              ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) pgJoinGroup)
          )
          ( HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 2)
              ( ( Hs.coerce
                    @(Hs.Vector Actor)
                    @(HsProtobuf.NestedVec Actor)
                )
                  pgJoinActors
              )
          )
      )
      ( HsProtobuf.encodeMessageField
          (HsProtobuf.FieldNumber 3)
          ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) pgJoinScope)
      )
  decodeMessage _ =
    Hs.pure PgJoin
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.NestedVec Actor)
                @(Hs.Vector Actor)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 3)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "group")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 2)
        ( HsProtobufAST.Repeated
            (HsProtobufAST.Named (HsProtobufAST.Single "Actor"))
        )
        (HsProtobufAST.Single "actors")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 3)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "scope")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB PgJoin) where
  toJSONPB (PgJoin f1 f2 f3) =
    HsJSONPB.object
      [ "group" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f1)
      , "actors"
          .= ( ( Hs.coerce
                   @(Hs.Vector Actor)
                   @(HsProtobuf.NestedVec Actor)
               )
                 f2
             )
      , "scope" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f3)
      ]
  toEncodingPB (PgJoin f1 f2 f3) =
    HsJSONPB.pairs
      [ "group" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f1)
      , "actors"
          .= ( ( Hs.coerce
                   @(Hs.Vector Actor)
                   @(HsProtobuf.NestedVec Actor)
               )
                 f2
             )
      , "scope" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f3)
      ]
instance (HsJSONPB.FromJSONPB PgJoin) where
  parseJSONPB =
    HsJSONPB.withObject
      "PgJoin"
      ( \obj ->
          Hs.pure PgJoin
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "group")
                )
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.NestedVec Actor)
                      @(Hs.Vector Actor)
                  )
                    (obj .: "actors")
                )
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "scope")
                )
      )
instance (HsJSONPB.ToJSON PgJoin) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON PgJoin) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema PgJoin) where
  declareNamedSchema _ =
    do
      let declare_group = HsJSONPB.declareSchemaRef
      pgJoinGroup <- declare_group Proxy.Proxy
      let declare_actors = HsJSONPB.declareSchemaRef
      pgJoinActors <- declare_actors Proxy.Proxy
      let declare_scope = HsJSONPB.declareSchemaRef
      pgJoinScope <- declare_scope Proxy.Proxy
      let _ =
            Hs.pure PgJoin
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_group)
                  )
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.NestedVec Actor)
                        @(Hs.Vector Actor)
                    )
                      (HsJSONPB.asProxy declare_actors)
                  )
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_scope)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "PgJoin"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "group"
                        , pgJoinGroup
                        )
                      ,
                        ( "actors"
                        , pgJoinActors
                        )
                      ,
                        ( "scope"
                        , pgJoinScope
                        )
                      ]
                }
          }
data PgLeave
  = PgLeave
  { pgLeaveGroup :: Hs.Text
  , pgLeaveActors :: (Hs.Vector Actor)
  , pgLeaveScope :: Hs.Text
  }
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData PgLeave)
instance (HsProtobuf.Named PgLeave) where
  nameOf _ = Hs.fromString "PgLeave"
instance (HsProtobuf.HasDefault PgLeave)
instance (HsProtobuf.Message PgLeave) where
  encodeMessage _ PgLeave{pgLeaveGroup, pgLeaveActors, pgLeaveScope} =
    Hs.mappend
      ( Hs.mappend
          ( HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 1)
              ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) pgLeaveGroup)
          )
          ( HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 2)
              ( ( Hs.coerce
                    @(Hs.Vector Actor)
                    @(HsProtobuf.NestedVec Actor)
                )
                  pgLeaveActors
              )
          )
      )
      ( HsProtobuf.encodeMessageField
          (HsProtobuf.FieldNumber 3)
          ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) pgLeaveScope)
      )
  decodeMessage _ =
    Hs.pure PgLeave
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.NestedVec Actor)
                @(Hs.Vector Actor)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 3)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "group")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 2)
        ( HsProtobufAST.Repeated
            (HsProtobufAST.Named (HsProtobufAST.Single "Actor"))
        )
        (HsProtobufAST.Single "actors")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 3)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "scope")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB PgLeave) where
  toJSONPB (PgLeave f1 f2 f3) =
    HsJSONPB.object
      [ "group" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f1)
      , "actors"
          .= ( ( Hs.coerce
                   @(Hs.Vector Actor)
                   @(HsProtobuf.NestedVec Actor)
               )
                 f2
             )
      , "scope" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f3)
      ]
  toEncodingPB (PgLeave f1 f2 f3) =
    HsJSONPB.pairs
      [ "group" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f1)
      , "actors"
          .= ( ( Hs.coerce
                   @(Hs.Vector Actor)
                   @(HsProtobuf.NestedVec Actor)
               )
                 f2
             )
      , "scope" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f3)
      ]
instance (HsJSONPB.FromJSONPB PgLeave) where
  parseJSONPB =
    HsJSONPB.withObject
      "PgLeave"
      ( \obj ->
          Hs.pure PgLeave
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "group")
                )
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.NestedVec Actor)
                      @(Hs.Vector Actor)
                  )
                    (obj .: "actors")
                )
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "scope")
                )
      )
instance (HsJSONPB.ToJSON PgLeave) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON PgLeave) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema PgLeave) where
  declareNamedSchema _ =
    do
      let declare_group = HsJSONPB.declareSchemaRef
      pgLeaveGroup <- declare_group Proxy.Proxy
      let declare_actors = HsJSONPB.declareSchemaRef
      pgLeaveActors <- declare_actors Proxy.Proxy
      let declare_scope = HsJSONPB.declareSchemaRef
      pgLeaveScope <- declare_scope Proxy.Proxy
      let _ =
            Hs.pure PgLeave
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_group)
                  )
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.NestedVec Actor)
                        @(Hs.Vector Actor)
                    )
                      (HsJSONPB.asProxy declare_actors)
                  )
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_scope)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "PgLeave"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "group"
                        , pgLeaveGroup
                        )
                      ,
                        ( "actors"
                        , pgLeaveActors
                        )
                      ,
                        ( "scope"
                        , pgLeaveScope
                        )
                      ]
                }
          }
newtype NodeSessions
  = NodeSessions {nodeSessionsSessions :: (Hs.Vector Auth.NameMessage)}
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData NodeSessions)
instance (HsProtobuf.Named NodeSessions) where
  nameOf _ = Hs.fromString "NodeSessions"
instance (HsProtobuf.HasDefault NodeSessions)
instance (HsProtobuf.Message NodeSessions) where
  encodeMessage _ NodeSessions{nodeSessionsSessions} =
    ( HsProtobuf.encodeMessageField
        (HsProtobuf.FieldNumber 1)
        ( ( Hs.coerce
              @(Hs.Vector Auth.NameMessage)
              @(HsProtobuf.NestedVec Auth.NameMessage)
          )
            nodeSessionsSessions
        )
    )
  decodeMessage _ =
    Hs.pure NodeSessions
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.NestedVec Auth.NameMessage)
                @(Hs.Vector Auth.NameMessage)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        ( HsProtobufAST.Repeated
            ( HsProtobufAST.Named
                ( HsProtobufAST.Dots
                    (HsProtobufAST.Path ("auth" Hs.:| ["NameMessage"]))
                )
            )
        )
        (HsProtobufAST.Single "sessions")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB NodeSessions) where
  toJSONPB (NodeSessions f1) =
    HsJSONPB.object
      [ "sessions"
          .= ( ( Hs.coerce
                   @(Hs.Vector Auth.NameMessage)
                   @(HsProtobuf.NestedVec Auth.NameMessage)
               )
                 f1
             )
      ]
  toEncodingPB (NodeSessions f1) =
    HsJSONPB.pairs
      [ "sessions"
          .= ( ( Hs.coerce
                   @(Hs.Vector Auth.NameMessage)
                   @(HsProtobuf.NestedVec Auth.NameMessage)
               )
                 f1
             )
      ]
instance (HsJSONPB.FromJSONPB NodeSessions) where
  parseJSONPB =
    HsJSONPB.withObject
      "NodeSessions"
      ( \obj ->
          Hs.pure NodeSessions
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.NestedVec Auth.NameMessage)
                      @(Hs.Vector Auth.NameMessage)
                  )
                    (obj .: "sessions")
                )
      )
instance (HsJSONPB.ToJSON NodeSessions) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON NodeSessions) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema NodeSessions) where
  declareNamedSchema _ =
    do
      let declare_sessions = HsJSONPB.declareSchemaRef
      nodeSessionsSessions <- declare_sessions Proxy.Proxy
      let _ =
            Hs.pure NodeSessions
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.NestedVec Auth.NameMessage)
                        @(Hs.Vector Auth.NameMessage)
                    )
                      (HsJSONPB.asProxy declare_sessions)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "NodeSessions"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "sessions"
                        , nodeSessionsSessions
                        )
                      ]
                }
          }
data Ready
  = Ready {}
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData Ready)
instance (HsProtobuf.Named Ready) where
  nameOf _ = Hs.fromString "Ready"
instance (HsProtobuf.HasDefault Ready)
instance (HsProtobuf.Message Ready) where
  encodeMessage _ Ready{} = Hs.mempty
  decodeMessage _ = Hs.pure Ready
  dotProto _ = []
instance (HsJSONPB.ToJSONPB Ready) where
  toJSONPB Ready = HsJSONPB.object []
  toEncodingPB Ready = HsJSONPB.pairs []
instance (HsJSONPB.FromJSONPB Ready) where
  parseJSONPB = HsJSONPB.withObject "Ready" (\obj -> Hs.pure Ready)
instance (HsJSONPB.ToJSON Ready) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON Ready) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema Ready) where
  declareNamedSchema _ =
    do
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "Ready"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      []
                }
          }
newtype ControlMessage
  = ControlMessage {controlMessageMsg :: (Hs.Maybe ControlMessageMsg)}
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData ControlMessage)
instance (HsProtobuf.Named ControlMessage) where
  nameOf _ = Hs.fromString "ControlMessage"
instance (HsProtobuf.HasDefault ControlMessage)
instance (HsProtobuf.Message ControlMessage) where
  encodeMessage _ ControlMessage{controlMessageMsg} =
    ( case controlMessageMsg of
        Hs.Nothing -> Hs.mempty
        Hs.Just x ->
          case x of
            ControlMessageMsgSpawn y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                ( ( Hs.coerce
                      @(Hs.Maybe Spawn)
                      @(HsProtobuf.Nested Spawn)
                  )
                    (Hs.Just y)
                )
            ControlMessageMsgTerminate y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                ( ( Hs.coerce
                      @(Hs.Maybe Terminate)
                      @(HsProtobuf.Nested Terminate)
                  )
                    (Hs.Just y)
                )
            ControlMessageMsgPing y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                ( ( Hs.coerce
                      @(Hs.Maybe Ping)
                      @(HsProtobuf.Nested Ping)
                  )
                    (Hs.Just y)
                )
            ControlMessageMsgPong y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 4)
                ( ( Hs.coerce
                      @(Hs.Maybe Pong)
                      @(HsProtobuf.Nested Pong)
                  )
                    (Hs.Just y)
                )
            ControlMessageMsgPgJoin y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 5)
                ( ( Hs.coerce
                      @(Hs.Maybe PgJoin)
                      @(HsProtobuf.Nested PgJoin)
                  )
                    (Hs.Just y)
                )
            ControlMessageMsgPgLeave y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 6)
                ( ( Hs.coerce
                      @(Hs.Maybe PgLeave)
                      @(HsProtobuf.Nested PgLeave)
                  )
                    (Hs.Just y)
                )
            ControlMessageMsgEnumerateNodeSessions y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 7)
                ( ( Hs.coerce
                      @(Hs.Maybe Auth.NameMessage)
                      @(HsProtobuf.Nested Auth.NameMessage)
                  )
                    (Hs.Just y)
                )
            ControlMessageMsgNodeSessions y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 8)
                ( ( Hs.coerce
                      @(Hs.Maybe NodeSessions)
                      @(HsProtobuf.Nested NodeSessions)
                  )
                    (Hs.Just y)
                )
            ControlMessageMsgReady y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 9)
                ( ( Hs.coerce
                      @(Hs.Maybe Ready)
                      @(HsProtobuf.Nested Ready)
                  )
                    (Hs.Just y)
                )
    )
  decodeMessage _ =
    Hs.pure ControlMessage
      <*> HsProtobuf.oneof
        Hs.Nothing
        [
          ( (HsProtobuf.FieldNumber 1)
          , Hs.pure (Hs.fmap ControlMessageMsgSpawn)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Spawn)
                        @(Hs.Maybe Spawn)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 2)
          , Hs.pure (Hs.fmap ControlMessageMsgTerminate)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Terminate)
                        @(Hs.Maybe Terminate)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 3)
          , Hs.pure (Hs.fmap ControlMessageMsgPing)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Ping)
                        @(Hs.Maybe Ping)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 4)
          , Hs.pure (Hs.fmap ControlMessageMsgPong)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Pong)
                        @(Hs.Maybe Pong)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 5)
          , Hs.pure (Hs.fmap ControlMessageMsgPgJoin)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested PgJoin)
                        @(Hs.Maybe PgJoin)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 6)
          , Hs.pure (Hs.fmap ControlMessageMsgPgLeave)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested PgLeave)
                        @(Hs.Maybe PgLeave)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 7)
          , Hs.pure (Hs.fmap ControlMessageMsgEnumerateNodeSessions)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Auth.NameMessage)
                        @(Hs.Maybe Auth.NameMessage)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 8)
          , Hs.pure (Hs.fmap ControlMessageMsgNodeSessions)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested NodeSessions)
                        @(Hs.Maybe NodeSessions)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 9)
          , Hs.pure (Hs.fmap ControlMessageMsgReady)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Ready)
                        @(Hs.Maybe Ready)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ]
  dotProto _ = []
instance (HsJSONPB.ToJSONPB ControlMessage) where
  toJSONPB
    (ControlMessage f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9) =
      HsJSONPB.object
        [ ( let
              encodeMsg =
                ( case f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9 of
                    Hs.Just (ControlMessageMsgSpawn f1) -> HsJSONPB.pair "spawn" f1
                    Hs.Just (ControlMessageMsgTerminate f2) ->
                      HsJSONPB.pair "terminate" f2
                    Hs.Just (ControlMessageMsgPing f3) -> HsJSONPB.pair "ping" f3
                    Hs.Just (ControlMessageMsgPong f4) -> HsJSONPB.pair "pong" f4
                    Hs.Just (ControlMessageMsgPgJoin f5) -> HsJSONPB.pair "pg_join" f5
                    Hs.Just (ControlMessageMsgPgLeave f6) ->
                      HsJSONPB.pair "pg_leave" f6
                    Hs.Just (ControlMessageMsgEnumerateNodeSessions f7) ->
                      HsJSONPB.pair "enumerate_node_sessions" f7
                    Hs.Just (ControlMessageMsgNodeSessions f8) ->
                      HsJSONPB.pair "node_sessions" f8
                    Hs.Just (ControlMessageMsgReady f9) -> HsJSONPB.pair "ready" f9
                    Hs.Nothing -> Hs.mempty
                )
             in
              ( \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then
                      ("msg" .= HsJSONPB.objectOrNull [encodeMsg] options) options
                    else
                      encodeMsg options
              )
          )
        ]
  toEncodingPB
    (ControlMessage f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9) =
      HsJSONPB.pairs
        [ ( let
              encodeMsg =
                ( case f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9 of
                    Hs.Just (ControlMessageMsgSpawn f1) -> HsJSONPB.pair "spawn" f1
                    Hs.Just (ControlMessageMsgTerminate f2) ->
                      HsJSONPB.pair "terminate" f2
                    Hs.Just (ControlMessageMsgPing f3) -> HsJSONPB.pair "ping" f3
                    Hs.Just (ControlMessageMsgPong f4) -> HsJSONPB.pair "pong" f4
                    Hs.Just (ControlMessageMsgPgJoin f5) -> HsJSONPB.pair "pg_join" f5
                    Hs.Just (ControlMessageMsgPgLeave f6) ->
                      HsJSONPB.pair "pg_leave" f6
                    Hs.Just (ControlMessageMsgEnumerateNodeSessions f7) ->
                      HsJSONPB.pair "enumerate_node_sessions" f7
                    Hs.Just (ControlMessageMsgNodeSessions f8) ->
                      HsJSONPB.pair "node_sessions" f8
                    Hs.Just (ControlMessageMsgReady f9) -> HsJSONPB.pair "ready" f9
                    Hs.Nothing -> Hs.mempty
                )
             in
              ( \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then
                      ("msg" .= HsJSONPB.pairsOrNull [encodeMsg] options) options
                    else
                      encodeMsg options
              )
          )
        ]
instance (HsJSONPB.FromJSONPB ControlMessage) where
  parseJSONPB =
    HsJSONPB.withObject
      "ControlMessage"
      ( \obj ->
          Hs.pure ControlMessage
            <*> ( let
                    parseMsg parseObj =
                      Hs.msum
                        [ Hs.Just Hs.. ControlMessageMsgSpawn
                            <$> HsJSONPB.parseField parseObj "spawn"
                        , Hs.Just Hs.. ControlMessageMsgTerminate
                            <$> HsJSONPB.parseField parseObj "terminate"
                        , Hs.Just Hs.. ControlMessageMsgPing
                            <$> HsJSONPB.parseField parseObj "ping"
                        , Hs.Just Hs.. ControlMessageMsgPong
                            <$> HsJSONPB.parseField parseObj "pong"
                        , Hs.Just Hs.. ControlMessageMsgPgJoin
                            <$> HsJSONPB.parseField parseObj "pg_join"
                        , Hs.Just Hs.. ControlMessageMsgPgLeave
                            <$> HsJSONPB.parseField parseObj "pg_leave"
                        , Hs.Just Hs.. ControlMessageMsgEnumerateNodeSessions
                            <$> HsJSONPB.parseField parseObj "enumerate_node_sessions"
                        , Hs.Just Hs.. ControlMessageMsgNodeSessions
                            <$> HsJSONPB.parseField parseObj "node_sessions"
                        , Hs.Just Hs.. ControlMessageMsgReady
                            <$> HsJSONPB.parseField parseObj "ready"
                        , Hs.pure Hs.Nothing
                        ]
                   in
                    (obj .: "msg" Hs.>>= HsJSONPB.withObject "msg" parseMsg)
                      <|> (parseMsg obj)
                )
      )
instance (HsJSONPB.ToJSON ControlMessage) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ControlMessage) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ControlMessage) where
  declareNamedSchema _ =
    do
      let declare_msg = HsJSONPB.declareSchemaRef
      controlMessageMsg <- declare_msg Proxy.Proxy
      let _ = Hs.pure ControlMessage <*> HsJSONPB.asProxy declare_msg
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "ControlMessage"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "msg"
                        , controlMessageMsg
                        )
                      ]
                }
          }
data ControlMessageMsg
  = ControlMessageMsgSpawn Spawn
  | ControlMessageMsgTerminate Terminate
  | ControlMessageMsgPing Ping
  | ControlMessageMsgPong Pong
  | ControlMessageMsgPgJoin PgJoin
  | ControlMessageMsgPgLeave PgLeave
  | ControlMessageMsgEnumerateNodeSessions Auth.NameMessage
  | ControlMessageMsgNodeSessions NodeSessions
  | ControlMessageMsgReady Ready
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData ControlMessageMsg)
instance (HsProtobuf.Named ControlMessageMsg) where
  nameOf _ = Hs.fromString "ControlMessageMsg"
instance (HsJSONPB.ToSchema ControlMessageMsg) where
  declareNamedSchema _ =
    do
      let declare_spawn = HsJSONPB.declareSchemaRef
      controlMessageMsgSpawn <- declare_spawn Proxy.Proxy
      let _ =
            Hs.pure ControlMessageMsgSpawn
              <*> HsJSONPB.asProxy declare_spawn
      let declare_terminate = HsJSONPB.declareSchemaRef
      controlMessageMsgTerminate <- declare_terminate Proxy.Proxy
      let _ =
            Hs.pure ControlMessageMsgTerminate
              <*> HsJSONPB.asProxy declare_terminate
      let declare_ping = HsJSONPB.declareSchemaRef
      controlMessageMsgPing <- declare_ping Proxy.Proxy
      let _ =
            Hs.pure ControlMessageMsgPing
              <*> HsJSONPB.asProxy declare_ping
      let declare_pong = HsJSONPB.declareSchemaRef
      controlMessageMsgPong <- declare_pong Proxy.Proxy
      let _ =
            Hs.pure ControlMessageMsgPong
              <*> HsJSONPB.asProxy declare_pong
      let declare_pg_join = HsJSONPB.declareSchemaRef
      controlMessageMsgPgJoin <- declare_pg_join Proxy.Proxy
      let _ =
            Hs.pure ControlMessageMsgPgJoin
              <*> HsJSONPB.asProxy declare_pg_join
      let declare_pg_leave = HsJSONPB.declareSchemaRef
      controlMessageMsgPgLeave <- declare_pg_leave Proxy.Proxy
      let _ =
            Hs.pure ControlMessageMsgPgLeave
              <*> HsJSONPB.asProxy declare_pg_leave
      let declare_enumerate_node_sessions = HsJSONPB.declareSchemaRef
      controlMessageMsgEnumerateNodeSessions <-
        declare_enumerate_node_sessions
          Proxy.Proxy
      let _ =
            Hs.pure ControlMessageMsgEnumerateNodeSessions
              <*> HsJSONPB.asProxy declare_enumerate_node_sessions
      let declare_node_sessions = HsJSONPB.declareSchemaRef
      controlMessageMsgNodeSessions <- declare_node_sessions Proxy.Proxy
      let _ =
            Hs.pure ControlMessageMsgNodeSessions
              <*> HsJSONPB.asProxy declare_node_sessions
      let declare_ready = HsJSONPB.declareSchemaRef
      controlMessageMsgReady <- declare_ready Proxy.Proxy
      let _ =
            Hs.pure ControlMessageMsgReady
              <*> HsJSONPB.asProxy declare_ready
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "ControlMessageMsg"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "spawn"
                        , controlMessageMsgSpawn
                        )
                      ,
                        ( "terminate"
                        , controlMessageMsgTerminate
                        )
                      ,
                        ( "ping"
                        , controlMessageMsgPing
                        )
                      ,
                        ( "pong"
                        , controlMessageMsgPong
                        )
                      ,
                        ( "pg_join"
                        , controlMessageMsgPgJoin
                        )
                      ,
                        ( "pg_leave"
                        , controlMessageMsgPgLeave
                        )
                      ,
                        ( "enumerate_node_sessions"
                        , controlMessageMsgEnumerateNodeSessions
                        )
                      ,
                        ( "node_sessions"
                        , controlMessageMsgNodeSessions
                        )
                      ,
                        ( "ready"
                        , controlMessageMsgReady
                        )
                      ]
                , HsJSONPB._schemaMinProperties = Hs.Just 1
                , HsJSONPB._schemaMaxProperties = Hs.Just 1
                }
          }
