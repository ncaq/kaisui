{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE NegativeLiterals #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeOperators #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Proto.RactorCluster.Node where

import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Google.Protobuf.Wrappers.Polymorphic as HsProtobuf
  ( Wrapped (..)
  )
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobufAST
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.JSONPB as HsJSONPB
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Proto3.Wire.Decode as HsProtobuf
  ( Parser
  , RawField
  )
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

data Cast
  = Cast
  { castTo :: Hs.Word64
  , castWhat :: Hs.ByteString
  , castVariant :: Hs.Text
  , castMetadata :: Hs.ByteString
  }
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData Cast)
instance (HsProtobuf.Named Cast) where
  nameOf _ = Hs.fromString "Cast"
instance (HsProtobuf.HasDefault Cast)
instance (HsProtobuf.Message Cast) where
  encodeMessage _ Cast{castTo, castWhat, castVariant, castMetadata} =
    Hs.mappend
      ( Hs.mappend
          ( Hs.mappend
              (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1) castTo)
              ( HsProtobuf.encodeMessageField
                  (HsProtobuf.FieldNumber 2)
                  ( (Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString))
                      castWhat
                  )
              )
          )
          ( HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 3)
              ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) castVariant)
          )
      )
      ( HsProtobuf.encodeMessageField
          (HsProtobuf.FieldNumber 6)
          ( (Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString))
              castMetadata
          )
      )
  decodeMessage _ =
    Hs.pure Cast
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 1)
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Bytes Hs.ByteString)
                @Hs.ByteString
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 3)
              )
          )
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Bytes Hs.ByteString)
                @Hs.ByteString
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 6)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.UInt64)
        (HsProtobufAST.Single "to")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 2)
        (HsProtobufAST.Prim HsProtobufAST.Bytes)
        (HsProtobufAST.Single "what")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 3)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "variant")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 6)
        (HsProtobufAST.Prim HsProtobufAST.Bytes)
        (HsProtobufAST.Single "metadata")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB Cast) where
  toJSONPB (Cast f1 f2 f3 f6) =
    HsJSONPB.object
      [ "to" .= f1
      , "what"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f2)
      , "variant"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f3)
      , "metadata"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f6)
      ]
  toEncodingPB (Cast f1 f2 f3 f6) =
    HsJSONPB.pairs
      [ "to" .= f1
      , "what"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f2)
      , "variant"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f3)
      , "metadata"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f6)
      ]
instance (HsJSONPB.FromJSONPB Cast) where
  parseJSONPB =
    HsJSONPB.withObject
      "Cast"
      ( \obj ->
          Hs.pure Cast
            <*> obj .: "to"
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Bytes Hs.ByteString)
                      @Hs.ByteString
                  )
                    (obj .: "what")
                )
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "variant")
                )
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Bytes Hs.ByteString)
                      @Hs.ByteString
                  )
                    (obj .: "metadata")
                )
      )
instance (HsJSONPB.ToJSON Cast) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON Cast) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema Cast) where
  declareNamedSchema _ =
    do
      let declare_to = HsJSONPB.declareSchemaRef
      castTo <- declare_to Proxy.Proxy
      let declare_what = HsJSONPB.declareSchemaRef
      castWhat <- declare_what Proxy.Proxy
      let declare_variant = HsJSONPB.declareSchemaRef
      castVariant <- declare_variant Proxy.Proxy
      let declare_metadata = HsJSONPB.declareSchemaRef
      castMetadata <- declare_metadata Proxy.Proxy
      let _ =
            Hs.pure Cast
              <*> HsJSONPB.asProxy declare_to
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Bytes Hs.ByteString)
                        @Hs.ByteString
                    )
                      (HsJSONPB.asProxy declare_what)
                  )
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_variant)
                  )
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Bytes Hs.ByteString)
                        @Hs.ByteString
                    )
                      (HsJSONPB.asProxy declare_metadata)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "Cast"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [ ("to", castTo)
                      , ("what", castWhat)
                      ,
                        ( "variant"
                        , castVariant
                        )
                      ,
                        ( "metadata"
                        , castMetadata
                        )
                      ]
                }
          }
data Call
  = Call
  { callTo :: Hs.Word64
  , callWhat :: Hs.ByteString
  , callTag :: Hs.Word64
  , callTimeoutMs :: Hs.Word64
  , callVariant :: Hs.Text
  , callMetadata :: Hs.ByteString
  }
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData Call)
instance (HsProtobuf.Named Call) where
  nameOf _ = Hs.fromString "Call"
instance (HsProtobuf.HasDefault Call)
instance (HsProtobuf.Message Call) where
  encodeMessage
    _
    Call
      { callTo
      , callWhat
      , callTag
      , callTimeoutMs
      , callVariant
      , callMetadata
      } =
      Hs.mappend
        ( Hs.mappend
            ( Hs.mappend
                ( Hs.mappend
                    ( Hs.mappend
                        (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1) callTo)
                        ( HsProtobuf.encodeMessageField
                            (HsProtobuf.FieldNumber 2)
                            ( (Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString))
                                callWhat
                            )
                        )
                    )
                    (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3) callTag)
                )
                ( HsProtobuf.encodeMessageField
                    (HsProtobuf.FieldNumber 4)
                    callTimeoutMs
                )
            )
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 5)
                ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) callVariant)
            )
        )
        ( HsProtobuf.encodeMessageField
            (HsProtobuf.FieldNumber 6)
            ( (Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString))
                callMetadata
            )
        )
  decodeMessage _ =
    Hs.pure Call
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 1)
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Bytes Hs.ByteString)
                @Hs.ByteString
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 3)
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 4)
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 5)
              )
          )
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Bytes Hs.ByteString)
                @Hs.ByteString
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 6)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.UInt64)
        (HsProtobufAST.Single "to")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 2)
        (HsProtobufAST.Prim HsProtobufAST.Bytes)
        (HsProtobufAST.Single "what")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 3)
        (HsProtobufAST.Prim HsProtobufAST.UInt64)
        (HsProtobufAST.Single "tag")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 4)
        (HsProtobufAST.Prim HsProtobufAST.UInt64)
        (HsProtobufAST.Single "timeout_ms")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 5)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "variant")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 6)
        (HsProtobufAST.Prim HsProtobufAST.Bytes)
        (HsProtobufAST.Single "metadata")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB Call) where
  toJSONPB (Call f1 f2 f3 f4 f5 f6) =
    HsJSONPB.object
      [ "to" .= f1
      , "what"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f2)
      , "tag" .= f3
      , "timeout_ms" .= f4
      , "variant"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f5)
      , "metadata"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f6)
      ]
  toEncodingPB (Call f1 f2 f3 f4 f5 f6) =
    HsJSONPB.pairs
      [ "to" .= f1
      , "what"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f2)
      , "tag" .= f3
      , "timeout_ms" .= f4
      , "variant"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f5)
      , "metadata"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f6)
      ]
instance (HsJSONPB.FromJSONPB Call) where
  parseJSONPB =
    HsJSONPB.withObject
      "Call"
      ( \obj ->
          Hs.pure Call
            <*> obj .: "to"
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Bytes Hs.ByteString)
                      @Hs.ByteString
                  )
                    (obj .: "what")
                )
            <*> obj .: "tag"
            <*> obj .: "timeout_ms"
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "variant")
                )
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Bytes Hs.ByteString)
                      @Hs.ByteString
                  )
                    (obj .: "metadata")
                )
      )
instance (HsJSONPB.ToJSON Call) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON Call) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema Call) where
  declareNamedSchema _ =
    do
      let declare_to = HsJSONPB.declareSchemaRef
      callTo <- declare_to Proxy.Proxy
      let declare_what = HsJSONPB.declareSchemaRef
      callWhat <- declare_what Proxy.Proxy
      let declare_tag = HsJSONPB.declareSchemaRef
      callTag <- declare_tag Proxy.Proxy
      let declare_timeout_ms = HsJSONPB.declareSchemaRef
      callTimeoutMs <- declare_timeout_ms Proxy.Proxy
      let declare_variant = HsJSONPB.declareSchemaRef
      callVariant <- declare_variant Proxy.Proxy
      let declare_metadata = HsJSONPB.declareSchemaRef
      callMetadata <- declare_metadata Proxy.Proxy
      let _ =
            Hs.pure Call
              <*> HsJSONPB.asProxy declare_to
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Bytes Hs.ByteString)
                        @Hs.ByteString
                    )
                      (HsJSONPB.asProxy declare_what)
                  )
              <*> HsJSONPB.asProxy declare_tag
              <*> HsJSONPB.asProxy declare_timeout_ms
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_variant)
                  )
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Bytes Hs.ByteString)
                        @Hs.ByteString
                    )
                      (HsJSONPB.asProxy declare_metadata)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "Call"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [ ("to", callTo)
                      , ("what", callWhat)
                      , ("tag", callTag)
                      ,
                        ( "timeout_ms"
                        , callTimeoutMs
                        )
                      ,
                        ( "variant"
                        , callVariant
                        )
                      ,
                        ( "metadata"
                        , callMetadata
                        )
                      ]
                }
          }
data CallReply
  = CallReply
  { callReplyTo :: Hs.Word64
  , callReplyTag :: Hs.Word64
  , callReplyWhat :: Hs.ByteString
  }
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData CallReply)
instance (HsProtobuf.Named CallReply) where
  nameOf _ = Hs.fromString "CallReply"
instance (HsProtobuf.HasDefault CallReply)
instance (HsProtobuf.Message CallReply) where
  encodeMessage
    _
    CallReply{callReplyTo, callReplyTag, callReplyWhat} =
      Hs.mappend
        ( Hs.mappend
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                callReplyTo
            )
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                callReplyTag
            )
        )
        ( HsProtobuf.encodeMessageField
            (HsProtobuf.FieldNumber 3)
            ( (Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString))
                callReplyWhat
            )
        )
  decodeMessage _ =
    Hs.pure CallReply
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 1)
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 2)
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Bytes Hs.ByteString)
                @Hs.ByteString
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 3)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.UInt64)
        (HsProtobufAST.Single "to")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 2)
        (HsProtobufAST.Prim HsProtobufAST.UInt64)
        (HsProtobufAST.Single "tag")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 3)
        (HsProtobufAST.Prim HsProtobufAST.Bytes)
        (HsProtobufAST.Single "what")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB CallReply) where
  toJSONPB (CallReply f1 f2 f3) =
    HsJSONPB.object
      [ "to" .= f1
      , "tag" .= f2
      , "what"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f3)
      ]
  toEncodingPB (CallReply f1 f2 f3) =
    HsJSONPB.pairs
      [ "to" .= f1
      , "tag" .= f2
      , "what"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f3)
      ]
instance (HsJSONPB.FromJSONPB CallReply) where
  parseJSONPB =
    HsJSONPB.withObject
      "CallReply"
      ( \obj ->
          Hs.pure CallReply
            <*> obj .: "to"
            <*> obj .: "tag"
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Bytes Hs.ByteString)
                      @Hs.ByteString
                  )
                    (obj .: "what")
                )
      )
instance (HsJSONPB.ToJSON CallReply) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON CallReply) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema CallReply) where
  declareNamedSchema _ =
    do
      let declare_to = HsJSONPB.declareSchemaRef
      callReplyTo <- declare_to Proxy.Proxy
      let declare_tag = HsJSONPB.declareSchemaRef
      callReplyTag <- declare_tag Proxy.Proxy
      let declare_what = HsJSONPB.declareSchemaRef
      callReplyWhat <- declare_what Proxy.Proxy
      let _ =
            Hs.pure CallReply
              <*> HsJSONPB.asProxy declare_to
              <*> HsJSONPB.asProxy declare_tag
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Bytes Hs.ByteString)
                        @Hs.ByteString
                    )
                      (HsJSONPB.asProxy declare_what)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "CallReply"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [ ("to", callReplyTo)
                      ,
                        ( "tag"
                        , callReplyTag
                        )
                      ,
                        ( "what"
                        , callReplyWhat
                        )
                      ]
                }
          }
newtype NodeMessage
  = NodeMessage {nodeMessageMsg :: (Hs.Maybe NodeMessageMsg)}
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData NodeMessage)
instance (HsProtobuf.Named NodeMessage) where
  nameOf _ = Hs.fromString "NodeMessage"
instance (HsProtobuf.HasDefault NodeMessage)
instance (HsProtobuf.Message NodeMessage) where
  encodeMessage _ NodeMessage{nodeMessageMsg} =
    ( case nodeMessageMsg of
        Hs.Nothing -> Hs.mempty
        Hs.Just x ->
          case x of
            NodeMessageMsgCast y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                ( (Hs.coerce @(Hs.Maybe Cast) @(HsProtobuf.Nested Cast))
                    (Hs.Just y)
                )
            NodeMessageMsgCall y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                ( (Hs.coerce @(Hs.Maybe Call) @(HsProtobuf.Nested Call))
                    (Hs.Just y)
                )
            NodeMessageMsgReply y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                ( ( Hs.coerce
                      @(Hs.Maybe CallReply)
                      @(HsProtobuf.Nested CallReply)
                  )
                    (Hs.Just y)
                )
    )
  decodeMessage _ =
    Hs.pure NodeMessage
      <*> HsProtobuf.oneof
        Hs.Nothing
        [
          ( (HsProtobuf.FieldNumber 1)
          , Hs.pure (Hs.fmap NodeMessageMsgCast)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Cast)
                        @(Hs.Maybe Cast)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 2)
          , Hs.pure (Hs.fmap NodeMessageMsgCall)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Call)
                        @(Hs.Maybe Call)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 3)
          , Hs.pure (Hs.fmap NodeMessageMsgReply)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested CallReply)
                        @(Hs.Maybe CallReply)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ]
  dotProto _ = []
instance (HsJSONPB.ToJSONPB NodeMessage) where
  toJSONPB (NodeMessage f1_or_f2_or_f3) =
    HsJSONPB.object
      [ ( let
            encodeMsg =
              ( case f1_or_f2_or_f3 of
                  Hs.Just (NodeMessageMsgCast f1) -> HsJSONPB.pair "cast" f1
                  Hs.Just (NodeMessageMsgCall f2) -> HsJSONPB.pair "call" f2
                  Hs.Just (NodeMessageMsgReply f3) -> HsJSONPB.pair "reply" f3
                  Hs.Nothing -> Hs.mempty
              )
           in
            ( \options ->
                if HsJSONPB.optEmitNamedOneof options
                  then
                    ("msg" .= HsJSONPB.objectOrNull [encodeMsg] options) options
                  else
                    encodeMsg options
            )
        )
      ]
  toEncodingPB (NodeMessage f1_or_f2_or_f3) =
    HsJSONPB.pairs
      [ ( let
            encodeMsg =
              ( case f1_or_f2_or_f3 of
                  Hs.Just (NodeMessageMsgCast f1) -> HsJSONPB.pair "cast" f1
                  Hs.Just (NodeMessageMsgCall f2) -> HsJSONPB.pair "call" f2
                  Hs.Just (NodeMessageMsgReply f3) -> HsJSONPB.pair "reply" f3
                  Hs.Nothing -> Hs.mempty
              )
           in
            ( \options ->
                if HsJSONPB.optEmitNamedOneof options
                  then
                    ("msg" .= HsJSONPB.pairsOrNull [encodeMsg] options) options
                  else
                    encodeMsg options
            )
        )
      ]
instance (HsJSONPB.FromJSONPB NodeMessage) where
  parseJSONPB =
    HsJSONPB.withObject
      "NodeMessage"
      ( \obj ->
          Hs.pure NodeMessage
            <*> ( let
                    parseMsg parseObj =
                      Hs.msum
                        [ Hs.Just Hs.. NodeMessageMsgCast
                            <$> HsJSONPB.parseField parseObj "cast"
                        , Hs.Just Hs.. NodeMessageMsgCall
                            <$> HsJSONPB.parseField parseObj "call"
                        , Hs.Just Hs.. NodeMessageMsgReply
                            <$> HsJSONPB.parseField parseObj "reply"
                        , Hs.pure Hs.Nothing
                        ]
                   in
                    (obj .: "msg" Hs.>>= HsJSONPB.withObject "msg" parseMsg)
                      <|> (parseMsg obj)
                )
      )
instance (HsJSONPB.ToJSON NodeMessage) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON NodeMessage) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema NodeMessage) where
  declareNamedSchema _ =
    do
      let declare_msg = HsJSONPB.declareSchemaRef
      nodeMessageMsg <- declare_msg Proxy.Proxy
      let _ = Hs.pure NodeMessage <*> HsJSONPB.asProxy declare_msg
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "NodeMessage"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "msg"
                        , nodeMessageMsg
                        )
                      ]
                }
          }
data NodeMessageMsg
  = NodeMessageMsgCast Cast
  | NodeMessageMsgCall Call
  | NodeMessageMsgReply CallReply
  deriving (Hs.Eq, Hs.Generic, Hs.Ord, Hs.Show)
instance (Hs.NFData NodeMessageMsg)
instance (HsProtobuf.Named NodeMessageMsg) where
  nameOf _ = Hs.fromString "NodeMessageMsg"
instance (HsJSONPB.ToSchema NodeMessageMsg) where
  declareNamedSchema _ =
    do
      let declare_cast = HsJSONPB.declareSchemaRef
      nodeMessageMsgCast <- declare_cast Proxy.Proxy
      let _ =
            Hs.pure NodeMessageMsgCast
              <*> HsJSONPB.asProxy declare_cast
      let declare_call = HsJSONPB.declareSchemaRef
      nodeMessageMsgCall <- declare_call Proxy.Proxy
      let _ =
            Hs.pure NodeMessageMsgCall
              <*> HsJSONPB.asProxy declare_call
      let declare_reply = HsJSONPB.declareSchemaRef
      nodeMessageMsgReply <- declare_reply Proxy.Proxy
      let _ =
            Hs.pure NodeMessageMsgReply
              <*> HsJSONPB.asProxy declare_reply
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "NodeMessageMsg"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "cast"
                        , nodeMessageMsgCast
                        )
                      ,
                        ( "call"
                        , nodeMessageMsgCall
                        )
                      ,
                        ( "reply"
                        , nodeMessageMsgReply
                        )
                      ]
                , HsJSONPB._schemaMinProperties = Hs.Just 1
                , HsJSONPB._schemaMaxProperties = Hs.Just 1
                }
          }
